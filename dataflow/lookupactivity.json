{
	"name": "lookupactivity",
	"properties": {
		"description": "It demonstrates flatten activity , exists and lookup activity ",
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"linkedService": {
						"referenceName": "AzureDataLakeStorage1",
						"type": "LinkedServiceReference"
					},
					"name": "source1"
				},
				{
					"linkedService": {
						"referenceName": "AzureDataLakeStorage1",
						"type": "LinkedServiceReference"
					},
					"name": "source2"
				},
				{
					"linkedService": {
						"referenceName": "AzureDataLakeStorage1",
						"type": "LinkedServiceReference"
					},
					"name": "source3"
				}
			],
			"sinks": [
				{
					"name": "sink1",
					"rejectedDataLinkedService": {
						"referenceName": "AzureDataLakeStorage1",
						"type": "LinkedServiceReference"
					}
				}
			],
			"transformations": [
				{
					"name": "flatten1"
				},
				{
					"name": "lookup1"
				},
				{
					"name": "exists1"
				}
			],
			"scriptLines": [
				"parameters{",
				"     sourceContainerName as string ('landingzone'),",
				"     sourceDirHier as string ('sourceSystem/sales'),",
				"     sourceFile as string ('sample2.json'),",
				"     targetContainerName as string ('silver'),",
				"     targetDirHier as string ('sourceSystem/sales')",
				"}",
				"source(output(",
				"          camp as integer,",
				"          chest as long,",
				"          fear as string,",
				"          graph as boolean,",
				"          how as boolean,",
				"          plural as (address as string[], age as short, name as string)[]",
				"     ),",
				"     useSchema: false,",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     inferDriftedColumnTypes: true,",
				"     ignoreNoFilesFound: false,",
				"     format: 'json',",
				"     fileSystem: ($sourceContainerName),",
				"     folderPath: ($sourceDirHier),",
				"     fileName: ($sourceFile),",
				"     documentForm: 'documentPerLine') ~> source1",
				"source(output(",
				"          camp as integer,",
				"          chest as long,",
				"          fear as string,",
				"          graph as boolean,",
				"          how as boolean,",
				"          plural as (address as string[], age as short, name as string)[]",
				"     ),",
				"     useSchema: false,",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'json',",
				"     fileSystem: ($sourceContainerName),",
				"     folderPath: ($sourceDirHier),",
				"     fileName: ($sourceFile),",
				"     documentForm: 'documentPerLine') ~> source2",
				"source(output(",
				"          camp as integer,",
				"          chest as long,",
				"          fear as string,",
				"          graph as boolean,",
				"          how as boolean,",
				"          plural as (address as string[], age as short, name as string)[]",
				"     ),",
				"     useSchema: false,",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'json',",
				"     fileSystem: ($sourceContainerName),",
				"     folderPath: ($sourceDirHier),",
				"     fileName: ($sourceFile),",
				"     documentForm: 'documentPerLine') ~> source3",
				"source1 foldDown(unroll(plural.address, plural),",
				"     mapColumn(",
				"          plural_address = plural.address,",
				"          plural_age = plural.age,",
				"          plural_name = plural.name,",
				"          camp",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> flatten1",
				"source2, flatten1 lookup(source2@camp == flatten1@camp,",
				"     multiple: true,",
				"     broadcast: 'auto')~> lookup1",
				"source3, flatten1 exists(source3@camp!=flatten1@camp,",
				"     negate:false,",
				"     broadcast: 'right')~> exists1",
				"flatten1 sink(validateSchema: false,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     keys:['camp'],",
				"     store: 'cache',",
				"     format: 'inline',",
				"     output: false,",
				"     saveOrder: 1) ~> sink1"
			]
		}
	}
}